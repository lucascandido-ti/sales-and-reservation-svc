service: sales-and-reservations

provider:
  name: aws
  runtime: nodejs22.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        # Permissões para SQS
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource:
            - !GetAtt MyQueue.Arn
        # Permissões para SNS
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - !Ref MySNSTopic
        # Permissões para SES
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
  environment:
    VEHICLE_API_BASE_URL: https://localhost:3333/dev/vehicle
    SQS_QUEUE_URL: !Ref MyQueue
    SNS_TOPIC_ARN: !Ref MySNSTopic
    DB_HOST: localhost
    DB_USER: postgres
    DB_PASSWORD: admintest
    DB_NAME: postgres
    DB_PORT: 5432

functions:
  reserveVehicle:
    handler: src/handlers/ReserveVehicle.handler
    description: Create New Reserve
    environment:
      VEHICLE_API_BASE_URL: https://localhost:3333/dev/vehicle
      SQS_QUEUE_URL: !Ref MyQueue
      SNS_TOPIC_ARN: !Ref MySNSTopic
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: admintest
      DB_NAME: postgres
      DB_PORT: 5432
    events:
      - http:
          path: reservation
          method: post
          cors: true

resources:
  Resources:
    # Configuração da Fila SQS (com DLQ opcional)
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-queue-${sls:stage}
        VisibilityTimeout: 30
        MessageRetentionPeriod: 1209600 # 14 dias
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt MyDLQ.Arn
          maxReceiveCount: 3

    # Dead Letter Queue (DLQ)
    MyDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dlq-${sls:stage}
        MessageRetentionPeriod: 1209600

    # Tópico SNS
    MySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-topic-${sls:stage}
        DisplayName: MyServerlessTopic

    # Configuração SES (Identity)
    MySESIdentity:
      Type: AWS::SES::EmailIdentity
      Properties:
        EmailIdentity: user@example.com # Substitua pelo seu e-mail verificado
